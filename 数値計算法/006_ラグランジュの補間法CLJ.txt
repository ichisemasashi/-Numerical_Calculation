;
;   FILE NAME: 006_ラグランジュの補間法CLJ.txt
;
;   以下の点を通る関数を補間して、補間された通過点を表示する。
;     (0.0, 0.0)
;     (1.0, 1.1)
;     (2.0, 2.5)
;     (3.0, 4.0)
;     (3.1, 4.1)
;     (5.0, 5.0)
;
;

(ns p006_lagrange)

;; --- 通過点の配列 ------------------------

(def xy-arr (make-array Double/TYPE 6 2))

(clojure.pprint/pprint xy-arr)

(defn set-xy [i j #^double v]
   (aset ^doubles xy-arr i j v))

(defn get-xy [i j]
   (aget ^doubles xy-arr i j))

(defn set-point [n #^double vx #^double vy]
   (set-xy n 0 vx)
   (set-xy n 1 vy))

(set-point 0 0.0 0.0)
(set-point 1 1.0 1.1)
(set-point 2 2.0 2.5)
(set-point 3 3.0 4.0)
(set-point 4 3.1 4.1)
(set-point 5 5.0 5.0)

(clojure.pprint/pprint xy-arr)

(def N (alength xy-arr))

;; --- ラグランジュ補間の処理 ----------------

(defn lagrange [#^double x]
   (let [z (make-array Double/TYPE N)
         y (atom (double 0.0))]
      (dotimes [k N]
         (let [xk (get-xy k 0)
               yk (get-xy k 1)]
            (do (aset ^doubles z k (double 1.0))
                (dotimes [i N]
                   (let [xi (get-xy i 0)]
                      (if (not= i k)
                          ; 補間計算
                          (aset ^doubles z k 
                                (* (aget ^doubles z k)
                                   (/ (- x xi) (- xk xi)))))))
                (reset! y (double (+ @y (* yk (aget ^doubles z k))))))))
      @y))

;; --- メインループ ------------------------

(defn m []
    (do (println "X\t\tY")
        (doseq [x (map #(double (/ % 10)) (range 0 50 2))]
           (let [y (lagrange x)]
              (println (format " %8.2f\t%8.2f" x y))))))
