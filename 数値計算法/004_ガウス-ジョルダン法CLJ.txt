;
;   FILE NAME: 004_ガウス-ジョルダン法CLJ.txt
;
;   3元連立方程式
;     2x + y + 3z = 13
;      x + 3y + 2z = 13
;     3x + 2y +  z = 10
;   をガウス-ジョルダン法によって解く
;
;

(ns p004_gauss-jordan)

(def EPS 0.001)

;; --- 方程式の係数 ------------------------
(def ks-arr (make-array Double/TYPE 3 4))

(clojure.pprint/pprint ks-arr)

(defn set-ks-helper [n x y z w]
   (aset ^doubles ks-arr n 0 (double x))
   (aset ^doubles ks-arr n 1 (double y))
   (aset ^doubles ks-arr n 2 (double z))
   (aset ^doubles ks-arr n 3 (double w)))

(set-ks-helper 0 2 1 3 13)
(set-ks-helper 1 1 3 2 13)
(set-ks-helper 2 3 2 1 10)

(clojure.pprint/pprint ks-arr)

(defn get-ks [i j]
   (aget ^doubles ks-arr i j))

(defn set-ks [i j #^double v]
   (aset ^doubles ks-arr i j v))

;; --- 方程式の次数 ------------------------
(def N (alength ks-arr))

;; --- 結果表示 ----------------------------
(defn pr-result []
   (dotimes [i N]
      (println (format "X%d = %6.2f" i (get-ks i N)))))

;; --- ピボットとなるxyz変数の係数を1にする ----
(defn piv1 [i pivot]
   (dotimes [j (+ N 1)]
      (set-ks i j (/ (get-ks i j) pivot))))

;; --- 不要な項の削除 -----------------------
(defn hakidashi [i]
   (dotimes [k N]
      (let [del (get-ks k i)]
         (doseq [j (range i (+ N 1))]
            (if (not= k i)
                (set-ks k j (- (get-ks k j)
                               (* del (get-ks i j)))))))))

;; --- メインループ ------------------------
(defn m []
   (loop [i 0]
      (if (< i N)
          (let [pivot (get-ks i i)]
             (if (< (Math/abs pivot) EPS)
                 (println (str "ピボットが許容誤差以下:" i))
                 (do (piv1 i pivot)
                     (hakidashi i)
                     (recur (+ i 1)))))
          (pr-result))))


