;
;
;  FILE NAME: 005_ガウス-ザイデル法CLJ.txt
;
;   3元連立方程式
;     2x + y + 3z = 13
;      x + 3y + 2z = 13
;     3x + 2y +  z = 10
;   をガウス-ザイデル法によって解く
;
;

(def an-eq (make-array Double/TYPE 3 4))
(def N (alength an-eq))

(defn set-eq [arr n x y z w]
   (aset ^doubles arr n 0 (double x))
   (aset ^doubles arr n 1 (double y))
   (aset ^doubles arr n 2 (double z))
   (aset ^doubles arr n 3 (double w)))

(set-eq an-eq 0 5 1 1 10)
(set-eq an-eq 1 1 4 1 12)
(set-eq an-eq 2 2 1 3 13)

(map vec an-eq)

(def res-arr (make-array Double/TYPE 3))

(dotimes [i N]
  (aset ^doubles res-arr i (double 1)))

(vec res-arr)

(def tmp-arr (make-array Double/TYPE 3))

(vec tmp-arr)

(defn eq-elm [x y]
   (aget ^doubles an-eq x y))
(defn res-elm [x]
   (aget ^doubles res-arr x))
(defn tmp-elm [x]
   (aget ^doubles tmp-arr x))

(def MAX_LOOP 30)
(def EPS (double 0.0001))
(def q (atom (double 1.0)))
(def ll (atom 0))

(defn display-result []
   (dotimes [i N]
      (let [res (res-elm i)]
      (println (format "x%d = %9.6f" i res)))))



(defn computing []
   (let [s (atom (double 0.0))]
      (dotimes [i N]
         (reset! s (double 0.0))
         (dotimes [j N]
            (if (not= i j)
               (reset! s (+ @s (* (eq-elm i j) (res-elm j))))))
         (aset ^doubles tmp-arr i
               (/ (- (eq-elm i N) @s) (eq-elm i i)))
         (reset! q (+ @q (Math/abs (- (res-elm i) (tmp-elm i)))))
         (aset ^double res-arr i (tmp-elm i)))))


(while (and (< EPS @q) (>= MAX_LOOP @ll))
   (do (swap! ll inc)
       (reset! q (double 0.0))
       (computing)))

(if (>= @ll MAX_LOOP)
    (println "収束せず。")
    (display-result))

